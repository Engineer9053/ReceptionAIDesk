import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from google_sheets import GoogleSheetsClient
from google_calendar import GoogleCalendarClient
import os

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Google
sheets = GoogleSheetsClient()
calendar = GoogleCalendarClient()

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ReceptionAIDesk. –ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
                         "üìã /services ‚Äî —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥\n"
                         "üóì /book ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å\n"
                         "üìÖ /my ‚Äî –º–æ–∏ –∑–∞–ø–∏—Å–∏")

@dp.message_handler(commands=["services"])
async def cmd_services(message: types.Message):
    services = sheets.list_services()
    reply = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" + "\n".join(f"- {s}" for s in services)
    await message.answer(reply)

@dp.message_handler(commands=["book"])
async def cmd_book_start(message: types.Message):
    # FSM: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Å–ª—É–≥—É
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
    # ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî

# FSM-—Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è /book: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏,
# –∑–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ª–∏—Å—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

@dp.message_handler(commands=["my"])
async def cmd_my(message: types.Message):
    entries = calendar.list_for_user(message.from_user.id)
    reply = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(f"{e['summary']} ‚Äî {e['start']}" for e in entries)
    await message.answer(reply)

def main():
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

if __name__ == "__main__":
    main()