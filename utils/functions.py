import json
import gspread
from datetime import datetime, timedelta, time, timezone
from configs import CALENDAR_ID, GOOGLE_CREDENTIALS_JSON, SHEET_ID
from google.oauth2 import service_account
from googleapiclient.discovery import build
from zoneinfo import ZoneInfo
from typing import List, Dict, Optional

scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive",
         "https://www.googleapis.com/auth/calendar"]

credentials = service_account.Credentials.from_service_account_info(
    json.loads(GOOGLE_CREDENTIALS_JSON),
    scopes=scope
)
client = gspread.authorize(credentials)

calendar = build("calendar", "v3", credentials=credentials)

def create_event(
    summary: str,
    description: str,
    start_time: str,
    duration_minutes: int,
    telegram_id: int,
    user_timezone: str = "Europe/Kyiv"
) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è.
    """

    local_tz = ZoneInfo(user_timezone)
    start_local = datetime.fromisoformat(start_time).replace(tzinfo=local_tz)
    end_local = start_local + timedelta(minutes=duration_minutes)

    start_utc = start_local.astimezone(timezone.utc)
    end_utc = end_local.astimezone(timezone.utc)

    event = {
        'summary': summary,
        'description': description + f" (telegram_id:{telegram_id})",
        'start': {
            'dateTime': start_utc.isoformat(),
            'timeZone': user_timezone,
        },
        'end': {
            'dateTime': end_utc.isoformat(),
            'timeZone': user_timezone,
        },
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'popup', 'minutes': 30},
                {'method': 'email', 'minutes': 30}
            ]
        }
    }

    try:
        event_result = calendar.events().insert(
            calendarId=CALENDAR_ID,
            body=event
        ).execute()

        # üî• –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è (–≤—Å—ë, —á—Ç–æ –≤–µ—Ä–Ω—É–ª API Google Calendar)
        return {
            "status": "success",
            "event": event_result
        }

    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }

def check_free_slots(
    start_time: str,
    duration_minutes: int = 0,
    end_time: str = None,
    user_timezone: str = "Europe/Kyiv",
    telegram_id: int = 0
) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
    –ï—Å–ª–∏ duration_minutes > 0 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç is_free),
    –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
    """

    local_tz = ZoneInfo(user_timezone)
    start_local = datetime.fromisoformat(start_time).replace(tzinfo=local_tz)
    end_local = start_local + timedelta(minutes=duration_minutes) if duration_minutes > 0 else datetime.fromisoformat(end_time).replace(tzinfo=local_tz)

    start_utc = start_local.astimezone(timezone.utc)
    end_utc = end_local.astimezone(timezone.utc)

    try:
        events_result = calendar.freebusy().query(
            body={
                "timeMin": start_utc.isoformat().replace('+00:00', 'Z'),
                "timeMax": end_utc.isoformat().replace('+00:00', 'Z'),
                "items": [{"id": CALENDAR_ID}]
            }
        ).execute()

        busy_periods = events_result['calendars'][CALENDAR_ID].get('busy', [])

        if duration_minutes > 0:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
            is_free = len(busy_periods) == 0
            return {"status": "success", "is_free": is_free}

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        busy_periods_dt = [
            (
                datetime.fromisoformat(p['start'].replace('Z', '+00:00')).astimezone(local_tz),
                datetime.fromisoformat(p['end'].replace('Z', '+00:00')).astimezone(local_tz)
            )
            for p in busy_periods
        ]
        busy_periods_dt.sort()

        WORK_START = time(8, 0)
        WORK_END = time(20, 0)

        current = start_local
        free_slots = []

        while current < end_local:
            # –í—ã—Ö–æ–¥–Ω—ã–µ
            if current.weekday() == 6:  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                current = datetime.combine((current + timedelta(days=1)).date(), WORK_START, tzinfo=local_tz)
                continue
            if current.weekday() == 5:  # —Å—É–±–±–æ—Ç–∞
                WORK_START = time(10, 0)
                WORK_END = time(18, 0)

            day_start = datetime.combine(current.date(), WORK_START, tzinfo=local_tz)
            day_end = datetime.combine(current.date(), WORK_END, tzinfo=local_tz)
            pointer = day_start

            for busy_start, busy_end in busy_periods_dt:
                if busy_end <= pointer or busy_start >= day_end:
                    continue
                if busy_start > pointer:
                    slot_start = pointer
                    slot_end = min(busy_start, day_end)
                    if slot_start < slot_end:
                        free_slots.append({"start": slot_start.isoformat(), "end": slot_end.isoformat()})
                pointer = max(pointer, busy_end)

            if pointer < day_end:
                free_slots.append({"start": pointer.isoformat(), "end": day_end.isoformat()})

            current = datetime.combine((current + timedelta(days=1)).date(), WORK_START, tzinfo=local_tz)

        return {"status": "success", "free_slots": free_slots}

    except Exception as e:
        return {"status": "error", "error": str(e)}


def cancel_event(
    start_time_local: str,
    end_time_local: str,
    telegram_id: int,
    user_timezone: str = "Europe/Kyiv",
    query: str = None
) -> dict:
    """
    –ò—â–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ Google –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (—á—Ç–æ–±—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å).
    """

    tz = ZoneInfo(user_timezone)
    start_dt = datetime.fromisoformat(start_time_local).replace(tzinfo=tz).astimezone(timezone.utc)
    end_dt = datetime.fromisoformat(end_time_local).replace(tzinfo=tz).astimezone(timezone.utc)

    start_time_iso = start_dt.isoformat().replace("+00:00", "Z")
    end_time_iso = end_dt.isoformat().replace("+00:00", "Z")

    try:
        events_result = calendar.events().list(
            calendarId=CALENDAR_ID,
            timeMin=start_time_iso,
            timeMax=end_time_iso,
            timeZone=user_timezone,
            q=str(telegram_id),   # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ telegram_id
            singleEvents=True,
            orderBy="startTime"
        ).execute()

        list_events = events_result.get("items", [])

        if not list_events:
            return {
                "status": "not_found",
                "deleted": [],
                "message": "No events found for given parameters"
            }

        deleted = []
        errors = []

        for event_row in list_events:
            event_id = event_row.get("id")
            try:
                # ‚ö†Ô∏è —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ª–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –î–û —É–¥–∞–ª–µ–Ω–∏—è
                deleted.append(event_row)

                # —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google Calendar
                calendar.events().delete(calendarId=CALENDAR_ID, eventId=event_id).execute()

            except Exception as e:
                errors.append({
                    "event_id": event_id,
                    "error": str(e)
                })

        return {
            "status": "success" if not errors else "partial_success",
            "deleted": deleted,   # üî• –º–∞—Å—Å–∏–≤ –ü–û–õ–ù–´–• —Å–æ–±—ã—Ç–∏–π (–≤—Å–µ –ø–æ–ª—è summary, description, start, end –∏ —Ç.–¥.)
            "errors": errors
        }

    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }


def find_events_by_time(
    start_time_local: str,
    end_time_local: str,
    telegram_id: int,
    user_timezone: str = "Europe/Kyiv",
    query: str = None
) -> list[dict]:
    """
    –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param start_time_local: –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (ISO —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-06-12T00:00:00")
    :param end_time_local: –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞
    :param telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    :param user_timezone: –¢–∞–π–º–∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Kyiv")
    :param query: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ summary/description
    :return: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ Google Calendar API)
    """

    tz = ZoneInfo(user_timezone)
    start_dt = datetime.fromisoformat(start_time_local).replace(tzinfo=tz).astimezone(timezone.utc)
    end_dt = datetime.fromisoformat(end_time_local).replace(tzinfo=tz).astimezone(timezone.utc)

    start_time_iso = start_dt.isoformat().replace("+00:00", "Z")
    end_time_iso = end_dt.isoformat().replace("+00:00", "Z")

    try:
        events_result = calendar.events().list(
            calendarId=CALENDAR_ID,
            timeMin=start_time_iso,
            timeMax=end_time_iso,
            timeZone=user_timezone,
            q=f"{telegram_id} {query}" if query else str(telegram_id),
            singleEvents=True,
            orderBy="startTime"
        ).execute()

        list_events = events_result.get("items", [])
        return list_events

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")
        return []


def read_google_sheet_as_dict(sheet_name: str = "Price", telegram_id: int = 0) -> str:

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    sheet = client.open_by_key(SHEET_ID)
    print("---------------------------------------------------------------------------- call read_google_sheet_as_dict")
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç (–∏–ª–∏ –ø–æ –∏–º–µ–Ω–∏)
    worksheet = sheet.worksheet(sheet_name) if sheet_name else sheet.get_worksheet(0)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{col1: val1, col2: val2, ...}, ...]
    records = worksheet.get_all_records()

    output = "\n".join(
        f"{i + 1}. {service['Service']}. –û–ø–∏—Å –ø–æ—Å–ª—É–≥–∏: {service['Description of service']}. –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏: {service['Price,$']}$"
        for i, service in enumerate(records)
    )

    return output


def upload_dicts_to_sheet(data: List[Dict], sheet_name: str = None):
    if not data:
        print("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –Ω–µ—á–µ–≥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å.")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    sheet = client.open_by_key(SHEET_ID)

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç
    try:
        worksheet = sheet.worksheet(sheet_name) if sheet_name else sheet.get_worksheet(0)
    except gspread.exceptions.WorksheetNotFound:
        print(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
        worksheet = sheet.add_worksheet(title=sheet_name, rows="100", cols="20")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    headers = list(data[0].keys())
    values = [headers] + [[str(row.get(col, "")) for col in headers] for row in data]

    worksheet.clear()
    worksheet.update("A1", values)

    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –ª–∏—Å—Ç '{worksheet.title}'")



def upsert_services(
    data: List[Dict],
    position: str,
    price: Optional[float] = None,
    description: Optional[str] = None
) -> List[Dict]:
    # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—É—Å–ª—É–≥–µ)
    for i, row in enumerate(data):
        if row["Service"] == position:
            if price <= 0:
                del data[i]
                return data
            if price is not None:
                row["Price,$"] = price
            if description is not None:
                row["Description of service"] = description
            return data  # –û–±–Ω–æ–≤–∏–ª–∏ –∏ –≤–µ—Ä–Ω—É–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —É—Å–ª—É–≥—É
    if price > 0:
        new_row = {"Service": position}
        new_row["Price,$"] = price
        new_row["Description of service"] = description if description is not None else ""
        data.append(new_row)
    return data  # –í–µ—Ä–Ω—É–ª–∏ —Å–ø–∏—Å–æ–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–æ–π


functions_register = {
    "read_google_sheet_as_dict": read_google_sheet_as_dict,
    "check_free_slots": check_free_slots,
    "create_event": create_event,
    "cancel_event": cancel_event,
    "find_events_by_time": find_events_by_time
}